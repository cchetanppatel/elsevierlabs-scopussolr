This file documents the tables (and general processes) around using RedShift
to calculate publication counts for authors/affiliations and cited by counts
for cores.

################################
# Tables
################################

# authors (set 1 ... core eid to author id mappings)
create table corestoauthors1(
	eid varchar(20),
	auid varchar(15) sortkey,
	epoch bigint,
	primary key(eid,auid));

# authors (set 2 ... core eid to author id mappings)
create table corestoauthors2(
	eid varchar(20),
	auid varchar(15) sortkey,
	epoch bigint,
	primary key(eid,auid));
	

# affiliations (set 1 ... core eid to affiliation id mappings)
create table corestoaffiliations1(
	eid varchar(20),
	afid varchar(15) sortkey,
	epoch bigint,
	primary key(eid,afid));

# affiliations (set2 ... core eid to affiliation id mappings)
create table corestoaffiliations2(
	eid varchar(20),
	afid varchar(15) sortkey,
	epoch bigint,
	primary key(eid,afid));
	
	
# references (set 1 ... core eid to reference eid mappings)
create table corestoreferences1(
	eid varchar(20),
	refid varchar(20) sortkey,
	epoch bigint,
	primary key(eid,refid));
	
# references (set 2 ... core eid to reference eid mappings)
create table corestoreferences2(
	eid varchar(20),
	refid varchar(20) sortkey,
	epoch bigint,
	primary key(eid,refid));
	
		
# Table to hold the publication counts for each author
# Will need multiple tables (current-n through current)
create table authorpubcnt1(
	auid varchar(15) sortkey,
	pubcnt Integer,
	primary key(auid));

create table authorpubcnt2(
	auid varchar(15) sortkey,
	pubcnt Integer,
	primary key(auid));
		
	
# Table to hold the publication counts for each affiliation
# Will need multiple tables (current-n through current)
create table affiliationpubcnt1(
	afid varchar(15) sortkey,
	pubcnt Integer,
	primary key(afid));

# Table to hold the publication counts for each affiliation
# Will need multiple tables (current-n through current)
create table affiliationpubcnt2(
	afid varchar(15) sortkey,
	pubcnt Integer,
	primary key(afid));
	

# Table to hold the citedby counts for each core eid
# Will need multiple tables (current-n through current)
create table corecbcnt1(
	refid varchar(15) sortkey,
	cbcnt Integer,
	primary key(refid));

# Table to hold the citedby counts for each core eid
# Will need multiple tables (current-n through current)
create table corecbcnt2(
	refid varchar(15) sortkey,
	cbcnt Integer,
	primary key(refid));
		
	
################################
# Load Queries
# Initial population of tables.
# This is atypical as the table
# will be incrementally updated
# as content is loaded into the
# search engine.  This is more
# of a bulk load approach.
################################

# authors (set 1 and set 2)
copy corestoauthors1 from 's3://els-ats/scopuscnts/pc/author/set1/' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|';
copy corestoauthors2 from 's3://els-ats/scopuscnts/pc/author/set2/' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|';


# affiliations (set 1 and set 2)
copy corestoaffiliations1 from 's3://els-ats/scopuscnts/pc/affiliation/set1/' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|';
copy corestoaffiliations2 from 's3://els-ats/scopuscnts/pc/affiliation/set2/' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|';


# references (set 1 and set 2).  Took 22m to load set1 (759,190,044 records)
copy corestoreferences1 from 's3://els-ats/scopuscnts/cbc/core/set1/' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;
copy corestoreferences2 from 's3://els-ats/scopuscnts/cbc/core/set2/' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;


###################################
# Publication/CitedBy Count Queries
# Populate to S3.  This is not the
# norm, as the results of the query
# would be put into a table and not
# to S3
###################################

# authors (set 1 ... Push the publication counts to S3)
unload ('SELECT auid, COUNT(*) AS "pubcnt"
FROM corestoauthors1
GROUP BY auid
ORDER BY auid') to  's3://els-ats/scopuscnts/pc/author/results/set1/auth-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;

# authors (set 2 ... Push the publication counts to S3)
unload ('SELECT auid, COUNT(*) AS "pubcnt"
FROM corestoauthors2
GROUP BY auid
ORDER BY auid') to  's3://els-ats/scopuscnts/pc/author/results/set2/auth-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;


# affiliations (set 1 ... Push the publication counts to S3)
unload ('SELECT afid, COUNT(*) AS "pubcnt"
FROM corestoaffiliations1
GROUP BY afid
ORDER BY afid') to  's3://els-ats/scopuscnts/pc/affiliation/results/set1/afil-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;

# affiliations (set 2 ... Push the publication counts to S3)
unload ('SELECT afid, COUNT(*) AS "pubcnt"
FROM corestoaffiliations2
GROUP BY afid
ORDER BY afid') to  's3://els-ats/scopuscnts/pc/affiliation/results/set2/afil-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;


# cores (set 1 ... Push the cited by counts to S3)
unload ('SELECT refid, COUNT(*) AS "cbcnt"
FROM corestoreferences1
GROUP BY refid
ORDER BY refid') to  's3://els-ats/scopuscnts/cbc/core/results/set1/core-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;

# cores (set 2 ... Push the cited by counts to S3)
unload ('SELECT refid, COUNT(*) AS "cbcnt"
FROM corestoreferences2
GROUP BY refid
ORDER BY refid') to  's3://els-ats/scopuscnts/cbc/core/results/set2/core-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;


# authors (Populate the publication counts into a table)
# The table will be different each day (current-n through current)
insert into authorpubcnt1(auid,pubcnt)
SELECT auid, COUNT(*) 
FROM corestoauthors1
GROUP BY auid
ORDER BY auid;

insert into authorpubcnt2(auid,pubcnt)
SELECT auid, COUNT(*) 
FROM corestoauthors2
GROUP BY auid
ORDER BY auid;


# affiliations (Populate the publication counts into a table)
# The table will be different each day (current-n through current)
insert into affiliationpubcnt1(afid,pubcnt)
SELECT authid, COUNT(*) 
FROM corestoaffiliations1
GROUP BY afid
ORDER BY afid;

insert into affiliationpubcnt2(afid,pubcnt)
SELECT authid, COUNT(*) 
FROM corestoaffiliations2
GROUP BY afid
ORDER BY afid;


# cores (Populate the cited by counts into a table)
# The table will be different each day (current-n through current)
# Query took 4m.  has 141,752,199 records (must be cores and dummy records)
insert into corecbcnt1(refid,cbcnt)
SELECT refid, COUNT(*) 
FROM corestoreferences1
GROUP BY refid
ORDER BY refid;

# cores (Populate the cited by counts into a table)
# The table will be different each day (current-n through current)
insert into corecbcnt2(refid,cbcnt)
SELECT refid, COUNT(*) 
FROM corestoreferences2
GROUP BY refid
ORDER BY refid;


###################################
# Calculate the delta between
# 2 files.  This will identify the
# records where the count needs to
# be updated.
###################################

# authors (Push to S3 only those records that are unique in authorpubcnt2 ...the 'new' table) 
# assume 'authorpubcnt2' is the 'current' table and 'authorpubcnt1' is the 'current-1'.
unload ('
select * from authorpubcnt2
minus
select * from authorpubcnt1') to  's3://els-ats/scopuscnts/pc/author/results/diff/auth-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;

# affiliations (Push to S3 only those records that are unique in affiliationpubcnt2 ...the 'new' table) 
# assume 'affiliationpubcnt2' is the 'current' table and 'affiliationpubcnt1' is the 'current-1'.
unload ('
select * from affiliationpubcnt2
minus
select * from affiliationpubcnt1') to  's3://els-ats/scopuscnts/pc/affiliation/results/diff/aff-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;

# cores (Push to S3 only those records that are unique in corecbcnt2 ...the 'new' table) 
# assume 'corecbcnt2' is the 'current' table and 'corecbcnt1' is the 'current-1'.
unload ('
select * from corecbcnt2
minus
select * from corecbcnt1') to  's3://els-ats/scopuscnts/cbc/core/results/diff/core-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;


######################
# Investigating citref
######################

# Create the table (will strip the prefix form the eid so it can be stored as a decimal field)
create table citref(
	neid decimal,
	refid varchar(15) sortkey,
	primary key(neid,refid));

Takes 0.2s

# Insert the records (make a numeric version of the eid)
insert into citref(
SELECT cast(substring(eid,8) as decimal) as neid, refid
FROM corestoreferences);



# Table to hold the sum (think of this as a hash)
create table citrefsum(
	refid varchar(15) sortkey,
	tot decimal(38,0),
	primary key(refid));
	
# Group and Sum
insert into citrefsum(
SELECT refid, SUM(neid) as tot
FROM citrefcnts
GROUP BY refid
ORDER BY refid);


# Need to do the same for table 2

# Do the difference

# Go go get the records that have changed


###################################
# Helpful scripts
###################################

# Output the publication counts 
unload ('SELECT authid, pubcnt
FROM authorspubcnt') to  's3://darin-core-auths-results/auth-' CREDENTIALS 'aws_access_key_id=AKIAJC674WSBSYUQYJLQ;aws_secret_access_key=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' delimiter '|' GZIP;

# concatenating multiple files
cat 'file'* > 'newfile'

# sorting a file in place
sort -o file1.txt file1.txt

# compare count files (that were output to s3)
comm -1 -3 'old' 'new' > 'baseline'
